<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-23 at 16:41:42.
 */
class CreateDataBaseModelTest extends PHPUnit_Framework_TestCase {

    /**
     * @var CreateDataBaseModel
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CreateDataBaseModel();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers CreateDataBaseModel::openDatabase
     * @todo   Implement testOpenDatabase().
     */
    public function testOpenDatabase() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::createDataBase
     * @todo   Implement testCreateDataBase().
     */
    public function testCreateDataBase() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::set_dbSrv
     * @todo   Implement testSet_dbSrv().
     */
    public function testSet_dbSrv() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::set_dbUser
     * @todo   Implement testSet_dbUser().
     */
    public function testSet_dbUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::set_dbPass
     * @todo   Implement testSet_dbPass().
     */
    public function testSet_dbPass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::set_dbName
     * @todo   Implement testSet_dbName().
     */
    public function testSet_dbName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::get_dbSrv
     * @todo   Implement testGet_dbSrv().
     */
    public function testGet_dbSrv() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::get_dbUser
     * @todo   Implement testGet_dbUser().
     */
    public function testGet_dbUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::get_dbPass
     * @todo   Implement testGet_dbPass().
     */
    public function testGet_dbPass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::get_dbName
     * @todo   Implement testGet_dbName().
     */
    public function testGet_dbName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CreateDataBaseModel::GetClassVars
     * 
     */
    public function testGetClassVars() {
        $this->assertNotNull($this->object->GetClassVars());
        $this->assertEquals(array('_dbSrv', '_dbUser', '_dbPass', '_dbName'), $this->object->GetClassVars());
    }

    /**
     * @covers CreateDataBaseModel::setClassVarsValues
     * 
     */
    public function testSetClassVarsValues() {
        $set = array('_dbSrv' => 'localhost', '_dbUser' => 'userLaurent', '_dbPass' => 'passLaurent', '_dbName' => 'baseLaurent');
        $this->assertTrue($this->object->setClassVarsValues($set));
        $this->assertEquals('localhost', $this->object->get_dbSrv());
        $this->assertEquals('userLaurent', $this->object->get_dbUser());
        $this->assertEquals('passLaurent', $this->object->get_dbPass());
        $this->assertEquals('baseLaurent', $this->object->get_dbName());
        return $this->object;
    }

    /**
     * @covers CreateDataBaseModel::setClassVarsValues
     * 
     */
    public function testSetClassVarsValuesMissing() {
        $set = array('_dbSrv' => 'localhost', '_dbUser' => 'userLaurent', '_dbPass' => 'passLaurent');
        $this->assertFalse($this->object->setClassVarsValues($set));
    }

    /**
     * @covers CreateDataBaseModel::setClassVarsValues
     * 
     */
    public function testSetClassVarsValuesWrongVar() {
        $set = array('_dbSrv' => 'localhost', '_dbUser' => 'userLaurent', '_somethingWrong' => 'passLaurent');
        $this->assertFalse($this->object->setClassVarsValues($set));
    }
    
    public function testgetClassVarsDefaultValues(){
        //$set = array('_dbSrv' => 'localhost', '_dbUser' => 'utilisteur de la base de données ', '_dbPass' => 'mot de passe', '_dbName' => 'nom de la base de données');
        $set = array('localhost', 'utilisateur de la base de données ', 'mot de passe', 'nom de la base de données');
        $this->assertEquals($set, $this->object->getClassVarsPlaceHolder());
    }
    
    /**
     * @depends testSetClassVarsValues
     */
    public function testGetClassVarsValues($object){
        $set = array('_dbSrv' => 'localhost', '_dbUser' => 'userLaurent', '_dbPass' => 'passLaurent', '_dbName' => 'baseLaurent');
        $this->assertEquals($set, $object->getClassVarsValues());
    }

}
