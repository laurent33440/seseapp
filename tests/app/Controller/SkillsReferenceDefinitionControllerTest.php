<?php

namespace controller;

//use controller\AControllerState;
//use controller\ActivitiesReferenceDefinitionController;
//use \RequestHandler;
use Symfony\Component\HttpFoundation\Request;
//use Symfony\Component\HttpFoundation\ParameterBag;
use SequenceState;
use model\ActivitiesReferenceDefinitionModel;
use model\FunctionReferentialDefinitionModel;
use Logger;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-03 at 23:10:12.
 */
class SkillsReferenceDefinitionControllerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var SkillsReferenceDefinitionController
     */
    protected $_object;
    /**
     *
     * @var SequenceState 
     */
    protected $_sequenceState;
    /**
     *
     * @var Request 
     */
    protected $_request;
    
    /**
     *
     * @var ActivitiesReferenceDefinitionModel
     */
    protected static $_activitiesReferences;
    /**
     *
     * @var Logger
     */
    protected $_log;
    
    public static function setUpBeforeClass(){
        self::$_activitiesReferences = new ActivitiesReferenceDefinitionModel();
        self::ActivitiesProvider();
    }
    
    public static function tearDownAfterClass(){
        self::$_activitiesReferences=null;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->_request = Request::createFromGlobals();
        $this->_sequenceState= new SequenceState(true);//no session
        $this->_sequenceState->setCurrentState('SkillsReferenceDefinition');
        $this->_object = new SkillsReferenceDefinitionController($this->_request,  $this->_sequenceState);
        $this->_log = Logger::getInstance();
        $this->_log->setLogFile("testLog.txt", false);
        $this->_log->setPriority(Logger::DEBUG);
        $this->_log->logInfo("\n======== TESTS Log Start ".__CLASS__." ========\n---------------------------------");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }
    
    //some fixture
    public static function fonctionsListProvider(){
        $vals= array('Fonction 0','Fonction 1','Fonction 2', 'Fonction 3', 'Fonction 4');
        $functionsModel = new FunctionReferentialDefinitionModel();
        $functionsModel->delFunctionsFromDataBase();
        foreach ($vals as $val){
            $functionsModel->set_descriptions($val);
        }
        $functionsModel->addFunctionToDataBase();
        return array(array($vals));
    }
    
    public static function ActivitiesProvider(){
        self::fonctionsListProvider();
        for ($n=0 ; $n<5 ; $n++) {
            self::$_activitiesReferences->set_activitiesReferencesList("A$n-$n test");
            self::$_activitiesReferences->set_functionsList("Fonction $n"); 
            self::$_activitiesReferences->set_activitiesDescriptionsList("Mon activit&eacute; test test test -- ligne ($n)");
            self::$_activitiesReferences->addActivityToDataBase();
        }
    }

    public function testFindAllParamsFromForm_singleActivity_submitAddSkill(){
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#1' => 'Mon activité test test test 2', 
                'ButtonSubmitAddSkill' => 0    
            
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $exp = array('0'=>array( 
                    '_skillsReferencesList' => 'c100',
                    '_skillsDescriptionsList' => 'Savoir souder',
                    0=>array('_bindedActivitiesLists' => array('Mon activité test test test 2',0,1))
                    )
                );
        $this->_object->setStateController(AControllerState::TERMINATED);
        $this->_object->run();//instanciate model
        $varsModel = $this->_object->getModel()->getClassVars();
        $tst = $this->_object->findAllParamsFromForm($this->_request->request->all(), $varsModel);
        $this->assertNotNull($tst);
//        var_dump($tst);
        $this->assertEquals($exp,$tst);
    }
    
    public function testFindAllParamsFromForm_multipleActivity_submitAddSkill(){
        //$this->ActivitiesProvider();
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#0' => 'Mon activité test test test 1',
                '_skillsReferencesList#1' => 'c200',
                '_skillsDescriptionsList#1' => 'Savoir écrire',
                '_bindedActivitiesLists#1#1#1' => 'Mon activité test test test 2',
                'ButtonSubmitAddSkill' => 1
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $exp1 = array('0'=>array( 
                    '_skillsReferencesList' => 'c100',
                    '_skillsDescriptionsList' => 'Savoir souder',
                    0 => array('_bindedActivitiesLists' =>array('Mon activité test test test 1',0,0)),
                    ),
                    '1'=>array( 
                    '_skillsReferencesList' => 'c200',
                    '_skillsDescriptionsList' => 'Savoir écrire',
                    0 => array('_bindedActivitiesLists' =>array('Mon activité test test test 2',1,1)),
                    ),
                );
        $this->_object->setStateController(AControllerState::TERMINATED);
        $this->_object->run();//instanciate model
        $varsModel = $this->_object->getModel()->getClassVars();
        $tst = $this->_object->findAllParamsFromForm($this->_request->request->all(), $varsModel);
        $this->assertEquals($exp1,$tst);
    }
    
    public function testFindAllParamsFromForm_SingleActivity_submitBindActivity_single(){
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#1' => 'Mon activité test test test 2', 
                'ButtonSubmitBindActivity' => 0    
            
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $exp = array('0'=>array( 
                    '_skillsReferencesList' => 'c100',
                    '_skillsDescriptionsList' => 'Savoir souder',
                    0 => array('_bindedActivitiesLists'=>array('Mon activité test test test 2',0,1))
                    )
                );
        $this->_object->setStateController(AControllerState::TERMINATED);
        $this->_object->run();//instanciate model
        $varsModel = $this->_object->getModel()->getClassVars();
        $tst = $this->_object->findAllParamsFromForm($this->_request->request->all(), $varsModel);
        $this->assertNotNull($tst);
//        var_dump($tst);
        $this->assertEquals($exp,$tst);
    }
    
    
    public function testFindAllParamsFromForm_SingleActivity_submitBindActivity_multiple(){
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#0' => 'Mon activité test test test 1',
                '_bindedActivitiesLists#0#0#1' => 'Mon activité test test test 2', 
                'ButtonSubmitBindActivity' => 0    
            
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $exp = array('0'=>array( 
                    '_skillsReferencesList' => 'c100',
                    '_skillsDescriptionsList' => 'Savoir souder',
                    0 => array('_bindedActivitiesLists'=>array('Mon activité test test test 1',0,0)),
                    1 => array('_bindedActivitiesLists'=>array('Mon activité test test test 2',0,1))
                    )
                );
        $this->_object->setStateController(AControllerState::TERMINATED);
        $this->_object->run();//instanciate model
        $varsModel = $this->_object->getModel()->getClassVars();
        $tst = $this->_object->findAllParamsFromForm($this->_request->request->all(), $varsModel);
        //var_dump($tst);
        $this->assertNotNull($tst);
        $this->assertEquals($exp,$tst);
    }
    
    /**
     * @covers controller\SkillsReferenceDefinitionController::compute
     * This test check state from IDLE to RUNNING : adding first skill
     */
    public function testCompute_addSkill_single(){
//        $this->_object->setStateController(AControllerState::IDLE);
//        $this->_object->run();//send view to client and now controller is in RUNNING state
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#0' => 'Mon activit&eacute; test test test -- ligne (1)',
                'ButtonSubmitAddSkill' => 0
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $this->_object->setStateController(AControllerState::RUNNING);
        $this->_object->setRequest($this->_request);
        $this->_object->run();//compute request
        $exp2 = array('c100',''); 
        $refs= $this->_object->getModel()->get_skillsReferencesList();
        $this->assertEquals($exp2, $refs);
        //see db
    }
    
    /**
     * @depends testCompute_addSkill_single
     * @covers controller\SkillsReferenceDefinitionController::compute
     * This test check state from STOPPED to RUNNING : append a skill
     */
    public function testCompute_addSkill_multiple(){
        $this->_object->setStateController(AControllerState::STOPPED);
        $this->_object->run();//restore model from data base, send view to client and now controller is in RUNNING state
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#0' => 'Mon activit&eacute; test test test -- ligne (1)',
                '_skillsReferencesList#1' => 'c200',
                '_skillsDescriptionsList#1' => 'Savoir écrire',
                '_bindedActivitiesLists#1#1#1' => 'Mon activit&eacute; test test test -- ligne (2)',
                'ButtonSubmitAddSkill' => 1
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $this->_object->setRequest($this->_request); // some datas from POST
        $this->_object->run();//compute request
        $exp2 = array('c100','c200',''); // submited skill added  ; 'c100' already added in testCompute_addSkill_single
        $refs= $this->_object->getModel()->get_skillsReferencesList();
        $this->assertEquals($exp2, $refs);
        //see db
    }
    
    /**
     * @depends testCompute_addSkill_single
     * @covers controller\SkillsReferenceDefinitionController::compute
     * This test check test from STOPPED to RUNNING : delete a skill
     */
    public function testCompute_delSkill(){
        $this->_object->setStateController(AControllerState::STOPPED);
        $this->_object->run();//restore model from data base, send view to client and now controller is in RUNNING state
        $parameters = array( 
                '_skillsReferencesList#0' => 'c100',
                '_skillsDescriptionsList#0' => 'Savoir souder',
                '_bindedActivitiesLists#0#0#0' => 'Mon activit&eacute; test test test -- ligne (1)',
                '_skillsReferencesList#1' => 'c200',
                '_skillsDescriptionsList#1' => 'Savoir écrire',
                '_bindedActivitiesLists#1#1#1' => 'Mon activit&eacute; test test test -- ligne (2)',
                'ButtonSubmitDelSkill' => 0
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $this->_object->setRequest($this->_request); // some datas from POST
        $this->_object->run();//compute request
        $exp2 = array('c200','');
        $refs= $this->_object->getModel()->get_skillsReferencesList();
        $this->assertEquals($exp2, $refs);
        //see db
    }
    
    /**
     * @covers controller\SkillsReferenceDefinitionController::compute
     * This test check state RUNNING : bind a new activity to a skill
     */
    public function testCompute_oneSkill_submitBindActivity(){
        $parameters = array( 
                '_skillsReferencesList#0' => 'c200',
                '_skillsDescriptionsList#0' => 'Savoir écrire',
                '_bindedActivitiesLists#0#0#0' => 'Mon activit&eacute; test test test -- ligne (2)', // 0#0 because it's the single restored from data base
                '_bindedActivitiesLists#0#0#1' => 'Mon activit&eacute; test test test -- ligne (1)', // new from form
                'ButtonSubmitBindActivity' => 0
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $this->_object->setRequest($this->_request); // some datas from POST
        $this->_object->setStateController(AControllerState::RUNNING);
        $this->_object->run();//compute request
        $exp = array(array(0=>'Mon activit&eacute; test test test -- ligne (2)',1=>'Mon activit&eacute; test test test -- ligne (1)'), array(0=>'Mon activit&eacute; test test test -- ligne (0)')); 
        $tst= $this->_object->getModel()->get_bindedActivitiesLists();
        $this->assertEquals($exp, $tst);
    }
    
    /**
     * @covers controller\SkillsReferenceDefinitionController::compute
     */
    public function testCompute_oneSkill_submitFreeActivity(){
        $parameters = array( 
                '_skillsReferencesList#0' => 'c200',
                '_skillsDescriptionsList#0' => 'Savoir écrire',
                '_bindedActivitiesLists#0#0#0' => 'Mon activit&eacute; test test test -- ligne (2)', // restored from data base
                '_bindedActivitiesLists#0#0#1' => 'Mon activit&eacute; test test test -- ligne (1)', 
                'ButtonSubmitFreeActivity' => '0#Mon activit&eacute; test test test -- ligne (1)' 
                );
        $this->_request = Request::create('http://localhost/sese/index.php', 'POST', $parameters);
        $this->_object->setRequest($this->_request); // some datas from POST
        $this->_object->setStateController(AControllerState::RUNNING);
        $this->_object->run();//compute request
        $exp = array(0=>array('Mon activit&eacute; test test test -- ligne (2)'), array('Mon activit&eacute; test test test -- ligne (0)')); 
        $tst= $this->_object->getModel()->get_bindedActivitiesLists();
        $this->assertEquals($exp, $tst);
    }
    
    
//    public function testcleanDb(){
//        $this->_object->setStateController(AControllerState::TERMINATED);
//        $this->_object->run();//instanciate model
//        $this->_object->getModel()->getDataBaseHandler()->dbQD('Constituer');
//        $this->_object->getModel()->getDataBaseHandler()->dbQD('Competence');
//        $this->_object->getModel()->getDataBaseHandler()->dbQD('Activite');
//    }
    
    
    ////////////////////////
    //    function array_key_intersect(&$a, &$b) {
//        $array = array();
//        foreach ($a as $key => $value) {
//            if (in_array($value, $b)){
//              $array[] = $key;
//            }
//        }
//        return $array;
//    }
//    
//    public function testArrayIntersect(){
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//        $tst = array( 
//                    '_skillsReferencesList' => 'c100',
//                    '_skillsDescriptionsList' => 'Savoir souder',
//                    '_bindedActivitiesLists' => 'Mon activité test test test 1',
//                    '_bindedActivitiesLists' => 'Mon activité test test test 2'
//                    );
//        $ref= array('_bindedActivitiesLists');
//        var_dump(array_keys($tst));
//        $tst = array_flip($tst);
//        var_dump($tst);
////        $in = array_intersect($tst, $ref);
//        $in = $this->array_key_intersect($tst, $ref);
//        var_dump($in);
//        $this->assertEquals(array( 'Mon activité test test test 1',  'Mon activité test test test 2'), $in);
//    }
    

}
