<?php

namespace Model;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-03 at 18:28:25.
 */
class TestAModelTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var TestAModel
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TestAModel;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testgetClassVars(){
        $t = $this->object->getClassVars();
        $this->assertEquals(array('_var1', '_list1'),$t);
    }
    
    public function testgetClassVarsValues(){
        $this->object->set_var1('value');
        $this->object->set_list1('element1');
        $this->object->set_list1('element2');
        $this->object->set_list1('element3',99);
        $t = $this->object->getClassVarsValues();
        $this->assertEquals(array('_var1'=>'value', '_list1'=>array('element1', 'element2', 99=>'element3')),$t);  
    }
    
    public function testisPropertyModel(){
        $ok1 = '_var1';
        $this->assertTrue($this->object->isPropertyModel($ok1));
        $ok2 = '_list1';
        $this->assertTrue($this->object->isPropertyModel($ok2));
        $ko1 = 'something';
        $this->assertFalse($this->object->isPropertyModel($ko1));
        $ko2 = array('something', 'other', '_var1');
        $this->assertFalse($this->object->isPropertyModel($ko2));
        $ko3 = 0;
        $this->assertFalse($this->object->isPropertyModel($ko3));
        
    }
    
     /**
     * tests for setters with parameters of models - 
     */
    public function test_call_user_func_array_PHP() {
        $this->object->set_list1('e1');
        $this->object->set_list1('e2');
        
        $func = 'set_list1';
        $param = 'e3';
        call_user_func_array(array($this->object, $func), array($param));
        $r = $this->object->get_list1(); 
        $this->assertEquals(array('e1', 'e2', 'e3'), $r);
        
        $func = 'set_list1';
        $params = array('e4',99);
        call_user_func_array(array($this->object, $func), $params);
        $r = $this->object->get_list1(); 
        $this->assertEquals(array('e1', 'e2', 'e3', 99=>'e4'), $r);
    }
    
    /**
     * array(propertyName=> value, ...)
     * @return test vector, expexted values
     */
    public function setClassVarsValues_form1_provider(){
        return array(
            array(array('_var1'=> 'value1'), array('value1', array())),
            array(array('_var1'=> 'value2', '_list1'=>'e1'), array('value2', array('e1'))),
            array(array('_list1'=>'e1'), array('', array('e1'))),
            array(array('someWrongProperty'=>'some value'), array('',array()))
        );
    }

    /**
     * array(propertyName=> value, ...)
     * @dataProvider setClassVarsValues_form1_provider
     * 
     */
    public function testsetClassVarsValues_form1($tst, $exp){
        $this->object->setClassVarsValues($tst);
        $this->assertEquals($exp[0], $this->object->get_var1());
        $this->assertEquals($exp[1], $this->object->get_list1());
    }
    
    /**
     * array(propertyName=> array(value, arg1,...),  ...)
     * @return test vector, expexted values
     */
    public function setClassVarsValues_form2_provider(){
        return array(
            array(  array('_var1'=> array('value1',1)), 
                    array('value1',1, array())),
            array(  array('_var1'=> array('value2',2), '_list1'=>array('e1',99)), 
                    array('value2', 2,array(99=>'e1'))),
            array(  array('_list1'=>array('e2',99)), 
                    array('', '',array(99=>'e2'))),
            array(  array('_var1'=> 'value1', '_list1'=>array('e3',99)), // mix form1 & form2
                    array('value1', '',array(99=>'e3'))),
            array(  array('someWrongProperty'=>'some value'), 
                    array('','',array()))
        );
    }

    /**
     * array(propertyName=> array(value, arg1,...),  ...)
     * @dataProvider setClassVarsValues_form2_provider
     */
    public function testsetClassVarsValues_form2($tst, $exp){
        $this->object->setClassVarsValues($tst);
        $this->assertEquals($exp[0], $this->object->get_var1());
        $this->assertEquals($exp[1], $this->object->getArg1());
        $this->assertEquals($exp[2], $this->object->get_list1());
    }
    
    /**
     * array(key => array(
     *                  propertyName=>value, 
     *      ...),
     *      propertyName => value, ...
     * )
     * @return test vector, expected values
     */
    public function setClassVarsValues_form3_provider(){
        return array(
            //0
            array(  array('0'=>array('_var1' => 'value1',)), 
                //expected 
                    array('value1','', array())),
            //1
            array(  array('0'=>array('_var1' => 'value2','_list1' => 'e1',)), 
                //expected
                    array('value2', '',array(0=>'e1'))),
            //2
            array(  array('0'=>array( '_var1' => 'value2'),'_list1' => 'e1'),
                //expected
                    array('value2', '',array(0=>'e1'))),    
            //3
            array(  array( 
                        '0'=>array( '_var1' => 'value3'),
                        '1'=>array('_list1' =>'e2'),
                    ),  
                //expected
                    array('value3', '',array(0=>'e2'))),
            //4
            array(  array('someWrongProperty'=>'some value'),
                //expected
                    array('','',array()))
        );
    }

    /**
     * array(key => array(
     *                  propertyName=>value, ...
     *      ...),
     *      propertyName => value, ...
     * )
     * @dataProvider setClassVarsValues_form3_provider
     */
    public function testsetClassVarsValues_form3($tst, $exp){
        $this->object->setClassVarsValues($tst);
        $this->assertEquals($exp[0], $this->object->get_var1());
        $this->assertEquals($exp[1], $this->object->getArg1());
        $this->assertEquals($exp[2], $this->object->get_list1());
    }
    
    /**
     * Mixed form data
     * array(key => array(
     *                  propertyName=>value, |
     *                  propertyName=> array(value, arg1,...),  
     *      ...)
     * )
     * @return test vector, expexted values
     */
    public function setClassVarsValues_form4_provider(){
        return array(
            //0
            array(  array(
                        '0'=>array('_var1' => array('value1',2))
                    ), 
                //expected
                    array('value1', 2,array())),
            //1
            array(  array(
                        '0'=>array('_var1' => array('value2',2),'_list1' => array('e3',99))
                    ), 
                //expected
                    array('value2', 2,array(99=>'e3'))),
            //2
            array(  array(
                        '0'=>array('_var1' => array('value3',2)),
                        '1'=>array('_list1' => array('e4',99))
                    ), 
                //expected
                    array('value3', 2,array(99=>'e4'))),
            //3
            array(  array(
                        '0'=>array('_var1' => array('value4',2),'_list1' => array('e5',99)),
                        '_list1' => array('e6',100)
                    ), 
                //expected
                    array('value4', 2,array(99=>'e5', 100=>'e6'))),
            //4
            array(  array(
                        '0'=>array('_var1' => array('disappear',-1),'_list1' => array('e6',99)),
                        '_var1'=>'staying'
                    ), 
                //expected
                    array('staying', '',array(99=>'e6'))),
            //5
            array(  array(
                        '0'=>array('_var1' => array('disappear',-1)),
                        '1'=>array('_list1' => array('e7',99)),
                        '_var1'=>array('staying',-10),
                        '_list1' => array('e8',100)
                    ), 
                //expected
                    array('staying', -10,array(99=>'e7',100=>'e8'))),
            //6
            array(  array('someWrongProperty'=>'some value'), 
                    array('','',array()))
        );
    }
    
    /**
     * Mixed form data
     * array(key => array(
     *                  propertyName=>value, |
     *                  propertyName=> array(value, arg1,...),  
     *      ...)
     * )
     * @dataProvider setClassVarsValues_form4_provider
     */
    public function testsetClassVarsValues_form4($tst, $exp){
        $this->object->setClassVarsValues($tst);
        $this->assertEquals($exp[0], $this->object->get_var1());
        $this->assertEquals($exp[1], $this->object->getArg1());
        $this->assertEquals($exp[2], $this->object->get_list1());
    }



}
